//
//  MusicViewController.swift
//  Teet
//
//  Created by Malak Sadek on 11/24/17.
//  Copyright Â© 2017 Malak Sadek. All rights reserved.
//

import UIKit
import AVFoundation

class MusicViewController: UIViewController, UITableViewDataSource,UITableViewDelegate{
    
    var arrayOfMusic:[String] = []
    var arrayOfDictionary:[String] = []
    
    @IBAction func settingsButton3Pressed(_ sender: Any) {
        performSegue(withIdentifier: "mediaToSettings", sender: nil)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if (segue.identifier == "mediaToSettings") {
            if let SettingsViewController = segue.destination as? SettingsViewController {
                    SettingsViewController.src = "media"
                SettingsViewController.segmentno = choice
            }
        }
    }
    
    //@IBOutlet weak var commingSoon: UILabel!
    @IBOutlet weak var bigGamesIcon: UIImageView!
    var player: AVAudioPlayer!
    var choice = 0;
    @IBAction func mohamedchanged(_ sender: UISegmentedControl) {
        switch sender.selectedSegmentIndex {
        case 0:
            dictionarytitle.isHidden = false;
            dictionarytable.isHidden = false;
            iconsdictionary.isHidden = false;
            musiclist.isHidden = true;
            iconsmusic.isHidden = true;
            musictitle.isHidden = true;
            play.isHidden = true;
            pause.isHidden = true;
            bigGamesIcon.isHidden = true;
            choice = 1
            break;
        case 1:
            dictionarytitle.isHidden = true;
            dictionarytable.isHidden = true;
            iconsdictionary.isHidden = true;
            musiclist.isHidden = false;
            iconsmusic.isHidden = false;
            musictitle.isHidden = false;
            play.isHidden = false;
            pause.isHidden = false;
            bigGamesIcon.isHidden = true;
            choice = 2
            break;
        case 2:
            dictionarytitle.isHidden = true;
            dictionarytable.isHidden = true;
            iconsdictionary.isHidden = true;
            musiclist.isHidden = true;
            iconsmusic.isHidden = true;
            musictitle.isHidden = true;
            play.isHidden = true;
            pause.isHidden = true;
            bigGamesIcon.isHidden = false;
            choice = 3
            break;
        default:
            break;
        }
        musiclist.reloadData();
        dictionarytable.reloadData();
    }
    
    override func viewWillAppear(_ animated: Bool) {
        UIApplication.shared.statusBarStyle = .lightContent
        mohamed2?.selectedSegmentIndex = choice-1;
        mohamed2.sendActions(for: .valueChanged)
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    @objc func swiped(_ gesture: UISwipeGestureRecognizer) {
        if gesture.direction == .left {
            if (mohamed2?.selectedSegmentIndex)! < 3 { // set your total tabs here
                mohamed2?.selectedSegmentIndex += 1
                choice += 1
                mohamed2.sendActions(for: .valueChanged)
            }
        } else if gesture.direction == .right {
            if (mohamed2?.selectedSegmentIndex)! > 0 {
                mohamed2?.selectedSegmentIndex -= 1
                choice -= 1
                mohamed2.sendActions(for: .valueChanged)
            }
        }
    }
    
    
    @IBOutlet weak var mohamed2: UISegmentedControl!
    @IBOutlet weak var dictionarytitle: UILabel!
    @IBOutlet weak var musictitle: UILabel!
    @IBOutlet weak var musiclist: UITableView!
    @IBOutlet weak var iconsmusic: UIImageView!
    @IBOutlet weak var iconsdictionary: UIImageView!
    @IBAction func pausePressed(_ sender: Any) {
        if (player.isPlaying) {
            player.pause();
            pause.isEnabled = false;
            play.isEnabled = true;
        }
    }
    @IBOutlet weak var pause: UIButton!
    
    @IBAction func playPressed(_ sender: Any) {
        if (!player.isPlaying) {
            player.play();
            pause.isEnabled = true;
            play.isEnabled = false;
        }
    }
    @IBOutlet weak var play: UIButton!
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if (mohamed2.selectedSegmentIndex == 1) {
        return arrayOfMusic.count
        }
        else  {
            return arrayOfDictionary.count
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if (mohamed2.selectedSegmentIndex != 1) {
            if ((indexPath.row != 1)&&(indexPath.row != 3)&&(indexPath.row != 5)&&(indexPath.row != 7)&&(indexPath.row != 11)&&(indexPath.row != 13)&&(indexPath.row != 16)&&(indexPath.row != 18)&&(indexPath.row != 20)&&(indexPath.row != 22)&&(indexPath.row != 24)&&(indexPath.row != 26)&&(indexPath.row != 28)&&(indexPath.row != 30)&&(indexPath.row != 32)&&(indexPath.row != 34)&&(indexPath.row != 36)&&(indexPath.row != 38)&&(indexPath.row != 40)&&(indexPath.row != 42)&&(indexPath.row != 44)&&(indexPath.row != 46)&&(indexPath.row != 48)&&(indexPath.row != 50)&&(indexPath.row != 52)&&(indexPath.row != 54)&&(indexPath.row != 0)&&(indexPath.row != 15)&&(indexPath.row != 9)) {
                //this one chnaged
                return 100;
            }
            else {
                //this one chnaged
                return 50;
            }
        } else {
            return 50;
        }
    }
    
    @IBOutlet weak var dictionarytable: UITableView!
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
       // print(mohamed2.selectedSegmentIndex);
        if (mohamed2.selectedSegmentIndex == 1) {
        let cell = musiclist.dequeueReusableCell(withIdentifier: "cell") as! MusicCell // create cell like tableviewcell
        
        var fontName = String()
        let userDef = UserDefaults.standard
  
             fontName = "AvantGardeMdITC"
             cell.name.font = UIFont(name:fontName, size:16)
       
       
        
        cell.name.text = arrayOfMusic[indexPath.row]
        
        cell.contentView.layer.removeAllAnimations()
        
        return cell
        }
        else {
            if ((indexPath.row == 0)||(indexPath.row == 15)) {
                let cell = dictionarytable.dequeueReusableCell(withIdentifier: "cell0") as! WhiteLabelTableViewCell;
                cell.contentView.layer.removeAllAnimations()
                cell.label.text = arrayOfDictionary[indexPath.row];
                 let userDef = UserDefaults.standard
                if(userDef.string(forKey: "Language") == "A")
                {
                    cell.label.textAlignment = NSTextAlignment.right
                }
                else {
                    cell.label.textAlignment = NSTextAlignment.left
                }
                return cell
            }

            else if ((indexPath.row == 1)||(indexPath.row == 3)||(indexPath.row == 5)||(indexPath.row == 7)||(indexPath.row == 11)||(indexPath.row == 13)||(indexPath.row == 16)||(indexPath.row == 18)||(indexPath.row == 20)||(indexPath.row == 22)||(indexPath.row == 24)||(indexPath.row == 26)||(indexPath.row == 28)||(indexPath.row == 30)||(indexPath.row == 32)||(indexPath.row == 34)||(indexPath.row == 36)||(indexPath.row == 38)||(indexPath.row == 40)||(indexPath.row == 42)||(indexPath.row == 44)||(indexPath.row == 46)||(indexPath.row == 48)||(indexPath.row == 9)||(indexPath.row == 50)||(indexPath.row == 52)||(indexPath.row == 54)) {
                let cell = dictionarytable.dequeueReusableCell(withIdentifier: "cell1") as! YellowLabelTableViewCell;
                cell.contentView.layer.removeAllAnimations()
                cell.label.text = arrayOfDictionary[indexPath.row];
                let userDef = UserDefaults.standard
                if(userDef.string(forKey: "Language") == "A")
                {
                 cell.label.textAlignment = NSTextAlignment.right
                }
                else {
                     cell.label.textAlignment = NSTextAlignment.left
                }
                return cell
        }
           else {
                let userDef = UserDefaults.standard
                if(userDef.string(forKey: "Language") == "A")
                {
                    let cell = dictionarytable.dequeueReusableCell(withIdentifier: "cell2a") as! DictionaryArabicTableViewCell;
                    cell.contentView.layer.removeAllAnimations()
                    cell.label.text = arrayOfDictionary[indexPath.row];
                     cell.label.textAlignment = NSTextAlignment.right
                    return cell
                } else {
                    let cell = dictionarytable.dequeueReusableCell(withIdentifier: "cell2e") as! DescriptionTableViewCell;
                    cell.contentView.layer.removeAllAnimations()
                    cell.label.text = arrayOfDictionary[indexPath.row];
                     cell.label.textAlignment = NSTextAlignment.left
                    return cell
                }
                
            }
            
    }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if (mohamed2.selectedSegmentIndex == 1) {
        switch(indexPath.row) {
        case 0:
            guard let path = Bundle.main.path(forResource: "mahragan1", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            break;
            
        case 1:
            guard let path = Bundle.main.path(forResource: "mahragan2", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            break;
        case 2:
            guard let path = Bundle.main.path(forResource: "mahragan3", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 3:
            guard let path = Bundle.main.path(forResource: "mahragan4", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 4:
            guard let path = Bundle.main.path(forResource: "mahragan5", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 5:
            guard let path = Bundle.main.path(forResource: "mahragan6", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 6:
            guard let path = Bundle.main.path(forResource: "mahragan7", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 7:
            guard let path = Bundle.main.path(forResource: "mahragan8", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 8:
            guard let path = Bundle.main.path(forResource: "mahragan9", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 9:
            guard let path = Bundle.main.path(forResource: "mahragan10", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 10:
            guard let path = Bundle.main.path(forResource: "mahragan11", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 11:
            guard let path = Bundle.main.path(forResource: "mahragan12", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        case 12:
            guard let path = Bundle.main.path(forResource: "mahragan13", ofType: "mp3") else {return}
            
            try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
            try? player.prepareToPlay()
            
            break;
        default:
            break;
            
        }
            player.rate = 1.0;
            player.play()
            pause.isEnabled = true;
        }
    }
    
    
    func listArabic()
    {
        arrayOfDictionary.append("ÙÙÙØ§Øª ÙØªØ¯Ø§ÙÙØ©");
        arrayOfDictionary.append("Ø§ÙÙÙØ§Ø¨");
        arrayOfDictionary.append(" Ø§ÙÙØ±Ø³Ù Ø§ÙØ¬ÙØ¨ Ø¨Ø§Ø¨ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ø§ÙØ¨ÙØªÙØªØ­ Ù ÙØªÙÙÙ ÙÙ ÙØ§ Ø­Ø¯ ÙØ¯Ø®Ù Ø§Ù ÙØ®Ø±Ø¬ ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø£Ø¨ÙØ©");
        arrayOfDictionary.append("ÙÙØ¨ Ø£Ù Ø£ÙØ«Ù ÙØ´ Ø¹Ø§Ø±ÙÙÙ Ø§Ø³ÙÙØ§");
        arrayOfDictionary.append("Ø¨Ø§Ø´ÙÙÙØ¯Ø³");
        arrayOfDictionary.append(" ÙÙØ¨ Ø§Ù Ø±Ø§Ø¬Ù Ø­ØªÙ ÙÙ ÙÙ ÙØ´ ÙÙÙØ¯Ø³ ÙØ¹ÙØ§");
        arrayOfDictionary.append("Ø§ÙØ¨Ø§ÙÙ");
        arrayOfDictionary.append("Ø¨Ø§ÙÙ Ø§ÙØ£Ø¬Ø±Ø©");
        arrayOfDictionary.append("Ø§ÙØ£Ø¬Ø±Ø©");
        arrayOfDictionary.append("Ø«ÙÙ Ø£Ù Ø±ÙÙØ¨Ø© ÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("ÙÙÙÙ");
        arrayOfDictionary.append("Ø§ÙÙÙØ§Ù Ø§ÙØ¨ÙØ±ÙØ¨ ÙÙÙ Ø§Ù ÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("ÙØ§Ø³Ø·Ù");
        arrayOfDictionary.append("ÙÙØ¨ Ø§Ù Ø³ÙØ§Ù ÙÙÙØ±ÙØ¨Ø§Øµ ÙØ´ Ø¹Ø§Ø±ÙÙÙ Ø£Ø³ÙÙ");
        arrayOfDictionary.append("Ø¬ÙÙ Ù ÙØµØ·ÙØ­Ø§Øª ÙØ¹Ø±ÙÙØ©");
        arrayOfDictionary.append("2 ÙÙ 5 Ø§Ù 3  ÙÙ 10 ");
        arrayOfDictionary.append("ØªØ°ÙØ±ØªÙÙ ÙÙ Ø®ÙØ³Ø© Ø¬ÙÙÙØ ØªÙØ§Øª ØªØ°Ø§ÙØ± ÙÙ Ø¹Ø´Ø±Ø© Ø¬ÙÙÙ");
        arrayOfDictionary.append("Ø¹ÙÙ Ø¬ÙØ¨ ÙØ§Ø³Ø·Ù-- Ø¹ÙÙ Ø£ÙØ¯Ù ÙÙØ§");
        arrayOfDictionary.append("ØªØªÙØ§Ù ÙÙØ§ Ø­Ø¯ ÙÙÙÙ Ø¹Ø§ÙØ² ÙÙØ²Ù ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø¹ÙÙ ÙÙÙÙ ÙØ§ Ø£ÙÙ");
        arrayOfDictionary.append("Ø¨ØªØªÙØ§Ù ÙÙØ§ Ø³Øª ÙØ¨ÙØ±Ø© ØªÙÙÙ ÙØ§Ø²ÙØ© Ø¨Ø±Ø§Ø­Ø© ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø§ÙØ¨Ø§Ø¨ ÙØ¹Ø§Ù ÙØ§ Ø¨Ø§Ø´ÙÙÙØ¯Ø³");
        arrayOfDictionary.append("Ø·ÙØ¨ ÙÙ Ø§ÙØ³ÙØ§Ù ÙÙØ´Ø®Øµ Ø§ÙÙØ§Ø²Ù ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ø§ÙÙ ÙÙÙÙ Ø§ÙØ¨Ø§Ø¨");
        arrayOfDictionary.append("Ø§ÙØ£Ø¬Ø±Ø© ÙØ§Ù ÙØ§Ø³Ø·ÙØ");
        arrayOfDictionary.append("Ø³Ø¤Ø§Ù Ø§Ù Ø´Ø®Øµ ÙØ¨ØªØ¯Ø£ Ø¹Ù Ø£Ø¬Ø±Ø© Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø§ÙØ¨Ø§ÙÙ ÙØ±Ø§ ÙØ§Ø³Ø·Ù");
        arrayOfDictionary.append("Ø·ÙØ¨ ÙØªÙØµÙÙ Ø§ÙØ¨Ø§ÙÙ ÙÙÙØ±Ø§Ø³Ù ÙØ±Ø§ ÙÙ Ø§ÙØ³ÙØ§Ù ÙÙØ±Ø§ÙØ¨");
        arrayOfDictionary.append("Ø§ÙØ£Ø®Ø± ÙÙØ§ ÙØ§ Ø¬Ø¯Ø¹Ø§Ù");
        arrayOfDictionary.append("Ø·Ø±ÙÙØ© Ø´ÙÙ ÙÙ Ø§ÙØ³ÙØ§Ù Ø§ÙÙ ÙÙÙÙ ÙÙØ±ÙØ§Ø¨ ÙØµÙÙØ§ Ø£Ø®Ø± Ø§ÙØ®Ø· Ø£ØªÙØ¶ÙÙØ§ Ø£ÙØ²ÙÙØ§");
        arrayOfDictionary.append("Ø§ÙØ£Ø¬Ø±Ø© ÙØ¹ Ø¨Ø¹Ø¯ ÙØ§ Ø­Ø¶Ø§Ø±Ø§Øª Ø§ÙØ£ÙÙ");
        arrayOfDictionary.append("Ø·ÙØ¨ Ø§ÙØ³ÙØ§Ù Ø§ÙØ¨Ø®ÙÙ ÙÙ Ø§ÙØ±ÙØ§Ø¨ ÙÙÙ Ø§ÙØ£Ø¬Ø±Ø© ÙÙ Ø¨Ø¹Ø¶ ÙØ¨Ù ÙØ§ ÙØªØ­Ø±Ù");
        arrayOfDictionary.append("ÙØ§Ø¶Ù ÙØ±Ø§Ø Ø®ÙØ´Ù ÙØ§ ÙØ¯Ø§Ù");
        arrayOfDictionary.append("Ø·Ø±ÙÙØ© ÙØªÙØ¶ÙØ­ Ø§ÙÙØ±Ø§Ø³Ù Ø§ÙÙØ§Ø¶ÙØ© ÙÙ Ø£Ø®Ø± Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø®Ø´ Ø±Ø§Ø¨Ø¹ ÙØ±Ø§");
        arrayOfDictionary.append("Ø±Ø§Ø¨Ø¹ ÙØ¹ÙØ§ÙØ§ Ø§Ø®Ø± ÙØ±Ø³Ù ÙØ±Ø§ ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("Ø­ÙØ¯Ø§ÙÙÙ Ø¹ÙÙ Ø§ÙØ³ÙØ§ÙØ©");
        arrayOfDictionary.append("ÙÙØ§ ÙÙÙÙ Ø³ÙØ§Ù Ø´ÙÙ Ø¨ÙØ·ÙØ¨ Ø§ÙØ£Ø¬Ø±Ø© ÙÙ Ø§ÙØ±ÙØ§Ø¨");
        arrayOfDictionary.append("Ø®Ù ÙÙØ³Ù ÙØ§ Ø¨Ø§Ø´ÙÙÙØ¯Ø³");
        arrayOfDictionary.append("Ø·ÙØ¨ Ø§ÙØ³ÙØ§Ù Ø§ÙÙØ³ØªØ¹Ø¬Ù ÙÙ Ø§ÙÙØ§Ø²Ù ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ø§ÙÙ ÙØªØ­Ø±Ù Ø£Ø³Ø±Ø¹ ÙÙ ÙØ¯Ø©");
        arrayOfDictionary.append("ÙØ³Ù Ø£ÙÙ ÙØ±Ø¯Ø© ÙØ¹Ø§Ù ÙØ§ Ø¨Ø§Ø´Ø§");
        arrayOfDictionary.append("ÙØ±Ø¯Ø© ÙØ¹ÙØ§ÙØ§ Ø£ÙÙ Ø·Ø§ÙØ¹Ø© Ø¨Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ø§ÙÙÙØ§Ø±Ø¯Ø© ÙÙØ³Ù Ø§ÙØ³ÙØ§Ù ÙØ´ ÙØ¹Ø§Ù ÙÙØ©");
        arrayOfDictionary.append("ÙÙØ§ Ø§ÙØ¹Ø±Ø¨ÙØ© ØªØ­ÙÙ ÙØ§ Ø£Ø³ØªØ§Ø°");
        arrayOfDictionary.append("ÙØ§ Ø§ÙØ±ÙØ§Ø¨ ØªØ³Ø£Ù Ø§ÙØ³ÙØ§Ù ÙÙØªØ­Ø±Ù Ø§ÙØªÙ Ù ÙÙ ÙØ±Ø¯ Ø£ÙÙ ÙÙØªØ­Ø±Ù ÙÙØ§ Ø§ÙØ¹Ø±Ø¨ÙØ© ØªØªÙÙÙ ÙÙÙØ§");
        arrayOfDictionary.append("ÙØªØ­Ø·Ø´ Ø±Ø¬ÙÙ ÙÙ Ø¸ÙØ± Ø§ÙÙØ±Ø³Ù");
        arrayOfDictionary.append("Ø¯Ù ÙØ§Ø¹Ø¯Ø© ÙÙ ÙÙØ§Ø¹Ø¯ Ø£Ù Ø³ÙØ§Ù ÙÙÙØ±ÙØ¨Ø§Øµ ÙØµØ±Ù Ø£ØµÙÙ");
        arrayOfDictionary.append("ÙÙÙÙØ¹ Ø§ÙØªØ¯Ø®ÙÙ ÙØ§ Ø­Ø¶Ø§Ø±Ø§Øª");
        arrayOfDictionary.append("ÙØ§Ø¹Ø¯Ø© Ø£Ø®Ø±Ù ÙÙÙØ¹ Ø§ÙØªØ¯Ø®ÙÙ ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ø¨Ø³ Ø¯Ù ÙØ§Ø¯Ø±Ø§ ÙÙØ§ Ø¨ØªØ­ØµÙ");
        arrayOfDictionary.append("ÙÙØ³Ø¹ ÙÙÙØ§Ø²Ù");
        arrayOfDictionary.append("Ø·ÙØ¨ ÙØªÙØ³ÙØ¹ ÙØ³Ø§Ø­Ø© ÙØ§ÙÙØ© ÙÙØ´Ø®Øµ Ø§ÙÙØ§Ø²Ù ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ");
        arrayOfDictionary.append("ÙØ¯Ø§Ù ÙØ­Ø¬ÙØ² ÙØ§ Ø¨Ø§Ø´Ø§");
        arrayOfDictionary.append("Ø¬ÙÙØ© Ø´ÙÙØ±Ø© ÙÙØ³ÙØ§ÙØ ÙØ§ Ø§ÙØ§ Ø¨ÙÙÙÙ Ø­Ø§Ø¬Ø² Ø§ÙÙØ±Ø³Ù Ø§ÙØ¬ÙØ¨Ù ÙØ£Ù Ø¨ÙØª Ø­ÙÙØ© ØªÙØ¬Ù ÙØ§ Ø§ÙØ§ Ø¨ÙÙÙÙ Ø­Ø¯ Ø­Ø§Ø¬Ø²Ù ÙØ¹ÙØ§");
        arrayOfDictionary.append("Ø³ÙØ© ÙØ¯Ø© ÙØ§ Ø¨Ø±ÙØ³");
        arrayOfDictionary.append("Ø¨ØªØªÙØ§Ù ÙÙØ§ ÙÙÙÙ Ø­Ø¯ ÙØ²ÙÙÙ ÙÙ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ Ù Ø¹Ø§ÙØ² Ø¨Ø§ÙÙ Ø§ÙØ±ÙØ§Ø¨ ØªÙØ³Ø¹ ÙÙ");
        arrayOfDictionary.append("ØªØ´ÙÙÙØ§ Ø§ÙÙØ±Ø§Ø³Ù Ø§ÙÙØ§Ø¶ÙØ© Ù ÙØ·ÙØ¹");
        arrayOfDictionary.append("ÙÙØ§ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ ÙÙÙÙÙØ´ ÙØ§ÙÙ ÙØ³Ù Ø¨Ø³ Ø§ÙØ³ÙØ§Ù ÙØ³ØªØ¹Ø¬Ù ÙØ¹Ø§ÙØ² ÙØªØ­Ø±Ù ÙÙØ·ÙØ¨ ÙÙ Ø§ÙØ±ÙØ§Ø¨ ÙØ¯ÙØ¹ÙØ§ Ø£Ø¬Ø±Ø© Ø¨Ø§ÙÙ Ø§ÙÙØ±Ø§Ø³Ù Ø§ÙÙØ§Ø¶ÙØ©");
    }
    func listEnglish(){
        arrayOfDictionary.append("Keywords for Any Microbus Ride");
        arrayOfDictionary.append("Allaab");
        arrayOfDictionary.append("The seat beside the door, which is folded up and down whenever, someone is getting in or out of the microbus.");
        arrayOfDictionary.append("Abla");
        arrayOfDictionary.append("A nickname for any female");
        arrayOfDictionary.append("Bashmohandes");
        arrayOfDictionary.append("It is a nickname for any male, but it originally means engineer.");
        arrayOfDictionary.append("El Baky");
        arrayOfDictionary.append("The change/ money.");
        arrayOfDictionary.append("El Ogra");
        arrayOfDictionary.append("The Fare paid for a ride");
        arrayOfDictionary.append("Mawqaf");
        arrayOfDictionary.append("The stop where a person can get a microbus from");
        arrayOfDictionary.append("Osta");
        arrayOfDictionary.append("A nickname for any microbus driver, and it is always used instead of knowing the driversâ name");
        arrayOfDictionary.append("Phrases");
        arrayOfDictionary.append("â2 men 5â â3 men 10â");
        arrayOfDictionary.append("As in 2 tickets from 5 pounds, and 3 tickets from 10 pounds");
        arrayOfDictionary.append("âAla ganb ya osta - Ala Edak hena ya ostaâ");
        arrayOfDictionary.append("Passengers say this when they are asking the driver to stop to let them out of the microbus.");
        arrayOfDictionary.append("âAla mehlek ya omyâ");
        arrayOfDictionary.append("Mehlek means take your time, It is usually said when an old woman is getting in or out of the microbus.");
        arrayOfDictionary.append("âEl bab maaâk ya Bashmohandesâ");
        arrayOfDictionary.append("The driver asking people to close the door of the microbus.");
        arrayOfDictionary.append("âEl ogra kam ya osta?â");
        arrayOfDictionary.append("Every passenger should ask this question to know how much the fare is.");
        arrayOfDictionary.append("âEl baky wara ya ostaâ");
        arrayOfDictionary.append("It is said When a passenger ask the driver for the change.");
        arrayOfDictionary.append("âEl akher hena ya gedaanâ");
        arrayOfDictionary.append("Akher means the end and the driver says this when he arrives to the end of the route and wants the passengers to get out.");
        arrayOfDictionary.append("âEl ogra ma baad ya hadarat el awalâ");
        arrayOfDictionary.append("The driver asks the passengers to start collecting the fare together.");
        arrayOfDictionary.append("âFady wara, khoshy ya madamâ");
        arrayOfDictionary.append("When someone is getting in the microbus and driver tells him that there is an empty seat.");
        arrayOfDictionary.append("âKhosh rabeaâ waraââ");
        arrayOfDictionary.append("To the farthest seat in the back, inside. Or it also means that there is an empty place in the back.");
        arrayOfDictionary.append("âHamdallah Al salamaâ");
        arrayOfDictionary.append("A decent way, the driver uses to ask for the fare.");
        arrayOfDictionary.append("âKhef Nafsak Ya Bashmohandesâ");
        arrayOfDictionary.append("It means move quicker, so the driver says it to whoever is getting in or out of the microbus to move faster.");
        arrayOfDictionary.append("âLesa awel farda maaâk ya bashaâ");
        arrayOfDictionary.append("This means that it is the first ride of the day and the driver doesnât have change yet.");
        arrayOfDictionary.append("âLama el arabya tehamel ya ostazâ");
        arrayOfDictionary.append("When the passengers ask the driver when they will move, and the driver answers that they will move when the microbus is full.");
        arrayOfDictionary.append("âMathotesh reglak f dahr el korsyâ");
        arrayOfDictionary.append("This is one of the main rules of any microbus driver, to not put any leg on the back of the seat.");
        arrayOfDictionary.append("âMamnoa el tadkhen ya ostazâ");
        arrayOfDictionary.append("No Smoking, When the driver is putting his rules and asks the passengers to not smoke.");
        arrayOfDictionary.append("âNewasaaâ lel nazelâ");
        arrayOfDictionary.append("It means give a space for those who are coming");
        arrayOfDictionary.append("âOdam mahgouz ya bashaâ");
        arrayOfDictionary.append("It means that the seat beside the driver is booked. And it is either the driver wants a lady to sit in the front or it is literally booked.");
        arrayOfDictionary.append("âSeka keda Ya brensâ");
        arrayOfDictionary.append("Seka means space, so it is always said when someone is getting in or out of the microbus and needs people to free a space for him.");
        arrayOfDictionary.append("âTeshelo el karasy el fadya w netlaaâ?â");
        arrayOfDictionary.append("When the microbus is not full yet and the driver wants to move, so he suggests the passengers to pay for the empty seats, so he can move.");
    }

    override func viewDidLoad() {
        super.viewDidLoad()

         let attr = NSDictionary(object: UIFont(name: "Kharabeesh Font", size: 14)!, forKey: NSAttributedStringKey.font as NSCopying)
         self.mohamed2.setTitleTextAttributes(attr as? [AnyHashable : Any], for: .normal)
         let userDef = UserDefaults.standard
         if(userDef.string(forKey: "Language") == "A")
         {
             musictitle?.text = "Ø£ØºØ§ÙÙ";
             dictionarytitle?.text = "Ø«ÙØ§ÙØ© ÙØºØ© Ø§ÙÙÙØ±ÙØ¨Ø§Øµ";
             mohamed2.setTitle( "ÙØ§ÙÙØ³ Ø§ÙÙÙÙØ±ÙØ¨Ø§Øµ", forSegmentAt: 0)
             mohamed2.setTitle("Ø£ØºØ§ÙÙ", forSegmentAt: 1)
             mohamed2.setTitle("Ø£ÙØ¹Ø§Ø¨", forSegmentAt: 2)
             
             listArabic()
         } else {
             musictitle?.text = "Listen to the Music and Live the Mood.";
             dictionarytitle?.text = "Microbus Dictionary...Learn A Language.";
             listEnglish()
         }
         
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø®ÙØ³Ø© ÙØ±ÙØ´Ø©");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø¯ÙØ¹ Ø§ÙØ¨ÙØ§Øª");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù ÙØ´ ÙØ§Ø±ÙØ­");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§Ù ÙÙ ÙØ¹Ø¨Øª ÙØ§ Ø²ÙØ±");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø­ÙØ§ÙØ© Ø±ÙØ­");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§ÙØ­Ø³Ù Ù Ø§ÙØ­Ø³ÙÙ");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§Ø¯ÙÙ ÙÙ Ø§ÙØ³ÙÙ ØªÙØ­Ø±");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§ÙØ¹ÙØ¨Ø© Ø§ÙØ°ÙØ¨ÙØ©");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§ÙØ¬ÙØ³ Ø§ÙÙØ§Ø¹Ù");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø§ÙÙØ³Ø§Ø¯Ø© Ø§ÙØ®Ø§ÙÙØ©");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø¯ÙØ§ØºÙ Ø·ÙØª ÙÙÙ");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø¹Ø¨Ø¯Ù ÙÙØªØ©");
        arrayOfMusic.append("ÙÙØ±Ø¬Ø§Ù Ø¹ÙÙ Ø§ÙØ³Ø§Ø­Ø©");

        guard let path = Bundle.main.path(forResource: "mahragan1", ofType: "mp3") else {return}

             try? player = AVAudioPlayer(contentsOf: URL(fileURLWithPath: path))
             try? player.prepareToPlay()

         // Do any additional setup after loading the view.
         
         let swipeRight = UISwipeGestureRecognizer(target: self, action: #selector(swiped))
         swipeRight.direction = UISwipeGestureRecognizerDirection.right
         self.view.addGestureRecognizer(swipeRight)
         
         let swipeLeft = UISwipeGestureRecognizer(target: self, action: #selector(swiped))
         swipeLeft.direction = UISwipeGestureRecognizerDirection.left
         self.view.addGestureRecognizer(swipeLeft)
         
         dictionarytitle.isHidden = true;
         dictionarytable.isHidden = true;
         iconsdictionary.isHidden = true;
         musiclist.isHidden = true;
         iconsmusic.isHidden = true;
         musictitle.isHidden = true;
         play.isHidden = true;
         pause.isHidden = true;
        // commingSoon.isHidden = true
         bigGamesIcon.isHidden = true
        
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

}
